import { db } from './firebase-config.js';
import { 
Â  collection, getDocs, doc, setDoc, getDoc, deleteDoc, 
Â  onSnapshot
} from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
import { addToCart } from './cart.js';

// ===================================
// ðŸ”¥ CRITICAL CHANGE: Global Inventory Map
// ===================================
let inventoryMap = {};

// ==========================
// Toast Notification
// ==========================
function showToast(message = "Item added!", duration = 2000, type = "success") {
Â  let toast = document.querySelector('.toast');
Â  if (!toast) {
Â  Â  toast = document.createElement('div');
Â  Â  toast.className = 'toast';
Â  Â  document.body.appendChild(toast);
Â  Â  Object.assign(toast.style, {
Â  Â  Â  position: 'fixed',
Â  Â  Â  bottom: '20px',
Â  Â  Â  left: '50%',
Â  Â  Â  transform: 'translateX(-50%)',
Â  Â  Â  color: '#fff',
Â  Â  Â  padding: '12px 20px',
Â  Â  Â  borderRadius: '8px',
Â  Â  Â  boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
Â  Â  Â  fontWeight: '500',
Â  Â  Â  zIndex: 9999,
Â  Â  Â  opacity: 0,
Â  Â  Â  transition: 'opacity 0.3s, transform 0.3s',
Â  Â  });
Â  }
Â  toast.style.backgroundColor = type === "error" ? "#dc2626" : "#16a34a";
Â  toast.textContent = message;
Â  toast.style.opacity = 1;
Â  toast.style.transform = 'translateX(-50%) translateY(0)';
Â  setTimeout(() => {
Â  Â  toast.style.opacity = 0;
Â  Â  toast.style.transform = 'translateX(-50%) translateY(20px)';
Â  }, duration);
}

// ==========================
// DOM Elements (UPDATED for Tab HTML)
// ==========================
// Select the main section containers based on their data-category attribute
const drinksSection = document.querySelector('.category-section[data-category="Drinks"]');
const drinksContainer = document.querySelector('.category-list[data-main="Drinks"]');
const foodSection = document.querySelector('.category-section[data-category="Food"]');
const foodContainer = document.querySelector('.category-list[data-main="Food"]');
const othersSection = document.querySelector('.category-section[data-category="Others"]');
const othersContainer = document.querySelector('.category-list[data-main="Others"]');

const loginPopup = document.getElementById('loginPopup');
const loginRedirect = document.getElementById('loginRedirect');
const termsPopup = document.getElementById('termsPopup');
const profileNameEl = document.querySelector('.profile-name');
const welcomeHeader = document.querySelector('.main-content header h1');

// Create the cartPopup element if it doesn't exist
const cartPopup = document.getElementById('cartPopup') || document.createElement('div');
cartPopup.id = 'cartPopup';
cartPopup.className = 'popup';

// ==========================
// Popup System
// ==========================

if (loginRedirect) {
Â  loginRedirect.addEventListener('click', () => {
Â  Â  window.location.href = 'login.html'; // replace with your actual login page URL
Â  });
}


function openPopup(popupEl) {
Â  if (!popupEl) return;
Â  popupEl.style.display = 'flex';

Â  const outsideClickHandler = (e) => {
Â  Â  if (e.target === popupEl) closePopup(popupEl);
Â  };
Â  popupEl.addEventListener('click', outsideClickHandler);

Â  const closeBtn = popupEl.querySelector('.close, .close-cart, .close-terms, .close-reviews, .close-btn');
Â  if (closeBtn) {
Â  Â  closeBtn.onclick = () => closePopup(popupEl);
Â  }

Â  popupEl._outsideClickHandler = outsideClickHandler;
}

function closePopup(popupEl) {
Â  if (!popupEl) return;
Â  popupEl.style.display = 'none';
Â  if (popupEl._outsideClickHandler) {
Â  Â  popupEl.removeEventListener('click', popupEl._outsideClickHandler);
Â  Â  popupEl._outsideClickHandler = null;
Â  }
}

// ==========================
// Cart Popup (dynamic)
// ==========================
cartPopup.innerHTML = `
Â  <div class="popup-content cart-popup">
Â  Â  <h2 class="product-name"></h2>
Â  Â  <p class="product-desc"></p>
Â  Â  <div class="sizes-container"></div>
Â  Â  <div class="addons-container"></div>

Â  Â  <div class="quantity-wrapper">
Â  Â  Â  <button type="button" class="decrease-qty">âˆ’</button>
Â  Â  Â  <input type="number" class="quantity-input" value="1" min="1">
Â  Â  Â  <button type="button" class="increase-qty">+</button>
Â  Â  </div>

Â  Â  <button class="confirm-add-cart">Add to Cart</button>
Â  Â  <button class="close-cart">Close</button>
Â  </div>
`;
document.body.appendChild(cartPopup);

// Quantity button functionality
document.addEventListener("click", (e) => {
Â  const qtyInput = cartPopup.querySelector(".quantity-input");
Â  if (!qtyInput) return;

Â  if (e.target.classList.contains("decrease-qty")) {
Â  Â  let val = parseInt(qtyInput.value) || 1;
Â  Â  if (val > 1) qtyInput.value = val - 1;
Â  }

Â  if (e.target.classList.contains("increase-qty")) {
Â  Â  let val = parseInt(qtyInput.value) || 1;
Â  Â  qtyInput.value = val + 1;
Â  }
});


// ==========================
// Load User Name
// ==========================
const storedName = localStorage.getItem("currentUserName");
if (storedName) {
Â  if (profileNameEl) profileNameEl.textContent = storedName;
Â  if (welcomeHeader) welcomeHeader.textContent = `Welcome, ${storedName}`;
}

// ==========================
// Firebase Auth
// ==========================
const auth = getAuth();
let currentUser = null;
onAuthStateChanged(auth, async (user) => {
Â  currentUser = user;
Â  if (!user) return;
Â  if (!storedName) {
Â  Â  try {
Â  Â  Â  const userDoc = await getDoc(doc(db, "users", user.uid));
Â  Â  Â  const data = userDoc.exists() ? userDoc.data() : {};
Â  Â  Â  const fullName = `${data.firstName || ""} ${data.lastName || ""}`.trim() || "Customer";
Â  Â  Â  if (profileNameEl) profileNameEl.textContent = fullName;
Â  Â  Â  if (welcomeHeader) welcomeHeader.textContent = `Welcome, ${fullName}`;
Â  Â  Â  localStorage.setItem("currentUserName", fullName);
Â  Â  } catch (err) {
Â  Â  Â  console.error("Error fetching user data:", err);
Â  Â  }
Â  }
});

// ==========================
// Stock Calculation
// ==========================
function calculateProductStock(product, inventoryMap) {
Â  let stockPerSize = [];
Â  if (product.sizes?.length) {
Â  Â  for (const size of product.sizes) {
Â  Â  Â  let possible = Infinity;

Â  Â  Â  const sizeItem = inventoryMap[size.id];
Â  Â  Â  if (sizeItem) {
Â  Â  Â  Â  const maxFromSize = Math.floor(sizeItem.quantity / (size.qty || 1));
Â  Â  Â  Â  possible = Math.min(possible, maxFromSize);
Â  Â  Â  }

Â  Â  Â  if (size.ingredients?.length) {
Â  Â  Â  Â  for (const ing of size.ingredients) {
Â  Â  Â  Â  Â  const invItem = inventoryMap[ing.id];
Â  Â  Â  Â  Â  if (invItem) {
Â  Â  Â  Â  Â  Â  const maxFromIng = Math.floor(invItem.quantity / (ing.qty || 1));
Â  Â  Â  Â  Â  Â  possible = Math.min(possible, maxFromIng);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  }

Â  Â  Â  if (size.others?.length) {
Â  Â  Â  Â  for (const other of size.others) {
Â  Â  Â  Â  Â  const invItem = inventoryMap[other.id];
Â  Â  Â  Â  Â  if (invItem) {
Â  Â  Â  Â  Â  Â  const maxFromOther = Math.floor(invItem.quantity / (other.qty || 1));
Â  Â  Â  Â  Â  Â  possible = Math.min(possible, maxFromOther);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  }

Â  Â  Â  if (size.addons?.length) {
Â  Â  Â  Â  for (const addon of size.addons) {
Â  Â  Â  Â  Â  const invItem = inventoryMap[addon.id];
Â  Â  Â  Â  Â  if (invItem && (addon.qty || 0) > 0) {
Â  Â  Â  Â  Â  Â  const maxFromAddon = Math.floor(invItem.quantity / (addon.qty || 1));
Â  Â  Â  Â  Â  Â  possible = Math.min(possible, maxFromAddon);
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  }

Â  Â  Â  stockPerSize.push({ ...size, stock: possible === Infinity ? 0 : possible });
Â  Â  }
Â  }
Â  return stockPerSize;
}

// ==========================
// Tab Management (NEW)
// ==========================
function setupTabs(firstCategoryWithProducts) {
Â  const tabButtons = document.querySelectorAll('.tab-button');
Â  const tabSections = document.querySelectorAll('.category-section');

Â  if (tabButtons.length === 0 || tabSections.length === 0) return;

Â  const showTab = (categoryName) => {
Â  Â  tabSections.forEach(section => {
Â  Â  Â  section.style.display = section.getAttribute('data-category') === categoryName ? 'block' : 'none';
Â  Â  });
Â  Â  tabButtons.forEach(button => {
Â  Â  Â  button.classList.remove('active');
Â  Â  Â  if (button.getAttribute('data-category') === categoryName) {
Â  Â  Â  Â  button.classList.add('active');
Â  Â  Â  }
Â  Â  });
Â  };

Â  tabButtons.forEach(button => {
Â  Â  button.addEventListener('click', () => {
Â  Â  Â  const category = button.getAttribute('data-category');
Â  Â  Â  showTab(category);
Â  Â  });
Â  });

Â  // Initial display: Show the first tab with products, or default to Drinks
Â  const initialCategory = firstCategoryWithProducts || 'Drinks';
Â  showTab(initialCategory);
}


// ==========================
// Load Products Realtime (FIXED CATEGORY GROUPING)
// ==========================
function loadProductsRealtime() {
Â  // Check if at least one container exists before proceeding
Â  if (!drinksContainer && !foodContainer && !othersContainer) return;
Â  
Â  onSnapshot(collection(db, "Inventory"), inventorySnapshot => {
Â  Â  inventoryMap = {};
Â  Â  inventorySnapshot.forEach(docSnap => {
Â  Â  Â  inventoryMap[docSnap.id] = { id: docSnap.id, ...docSnap.data() };
Â  Â  });

Â  Â  onSnapshot(collection(db, "products"), productSnapshot => {
Â  Â  Â  const products = productSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
Â  Â  Â  
Â  Â  Â  // Clear containers
Â  Â  Â  if(drinksContainer) drinksContainer.innerHTML = "";
Â  Â  Â  if(foodContainer) foodContainer.innerHTML = "";
Â  Â  Â  if(othersContainer) othersContainer.innerHTML = "";

Â  Â  Â  const grouped = {};
Â  Â  Â  for (const product of products) {
Â  Â  Â  Â  // Use the categoryMain and categorySub properties, defaulting to "Others" if missing
Â  Â  Â  Â  const mainCategory = product.categoryMain || "Others";
Â  Â  Â  Â  const subCategory = product.categorySub || "General"; // Default to General for Others
Â  Â  Â  Â  
Â  Â  Â  Â  // Use .trim() for clean key lookup.
Â  Â  Â  Â  const normalizedMainCategory = mainCategory.trim(); 

Â  Â  Â  Â  if (!grouped[normalizedMainCategory]) grouped[normalizedMainCategory] = {};
Â  Â  Â  Â  if (!grouped[normalizedMainCategory][subCategory]) grouped[normalizedMainCategory][subCategory] = [];
Â  Â  Â  Â  grouped[normalizedMainCategory][subCategory].push(product);
Â  Â  Â  }

Â  Â  Â  const mainCats = [
Â  Â  Â  Â  { name: "Drinks", container: drinksContainer, section: drinksSection },
Â  Â  Â  Â  { name: "Food", container: foodContainer, section: foodSection },
Â  Â  Â  Â  { name: "Others", container: othersContainer, section: othersSection },
Â  Â  Â  ];

Â  Â  Â  let firstCategoryWithProducts = null;

Â  Â  Â  mainCats.forEach(({ name, container, section }) => {
Â  Â  Â  Â  if (!container) return; // Skip if container is missing
Â  Â  Â  Â  container.innerHTML = "";
Â  Â  Â  Â  let mainCatHasProducts = false;

Â  Â  Â  Â  // Get and sort sub-categories for stable display order
Â  Â  Â  Â  if (grouped[name]) {
Â  Â  Â  Â  Â  // Define a specific order for sub-categories for better UX
Â  Â  Â  Â  Â  let orderedSubCats = [];
Â  Â  Â  Â  Â  // Define preferred order based on category
Â  Â  Â  Â  Â  if (name === "Drinks") orderedSubCats = ["Hot Coffee", "Ice Espresso", "Ice Cold Brew", "Non Coffee", "Others"]; 
Â  Â  Â  Â  Â  else if (name === "Food") orderedSubCats = ["Sandwiches", "Burger", "Snack", "Others"];
Â  Â  Â  Â  Â  else if (name === "Others") orderedSubCats = ["General"];

Â  Â  Â  Â  Â  // Add any sub-categories found in the data but not in the predefined list
Â  Â  Â  Â  Â  const subCatKeys = Object.keys(grouped[name]);
Â  Â  Â  Â  Â  subCatKeys.forEach(key => {
Â  Â  Â  Â  Â  Â  if (!orderedSubCats.includes(key)) {
Â  Â  Â  Â  Â  Â  Â  orderedSubCats.push(key);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  });


Â  Â  Â  Â  Â  for (const subCat of orderedSubCats) {
Â  Â  Â  Â  Â  Â  const productsArray = grouped[name][subCat];
Â  Â  Â  Â  Â  Â  if (!productsArray || !productsArray.length) continue;

Â  Â  Â  Â  Â  Â  mainCatHasProducts = true;
Â  Â  Â  Â  Â  Â  const subCatSection = document.createElement('div');
Â  Â  Â  Â  Â  Â  subCatSection.className = 'subcategory-section';
Â  Â  Â  Â  Â  Â  subCatSection.innerHTML = `<h3 class="subcategory-title">${subCat}</h3>`;

Â  Â  Â  Â  Â  Â  const horizontalContainer = document.createElement('div');
Â  Â  Â  Â  Â  Â  horizontalContainer.className = 'subcategory-products';
Â  Â  Â  Â  Â  Â  horizontalContainer.style.display = 'flex';
Â  Â  Â  Â  Â  Â  horizontalContainer.style.flexWrap = 'wrap';
Â  Â  Â  Â  Â  Â  horizontalContainer.style.gap = '15px';
Â  Â  Â  Â  Â  Â  subCatSection.appendChild(horizontalContainer);
Â  Â  Â  Â  Â  Â  container.appendChild(subCatSection);

Â  Â  Â  Â  Â  Â  for (const product of productsArray) {
Â  Â  Â  Â  Â  Â  Â  const stockInfo = calculateProductStock(product, inventoryMap);
Â  Â  Â  Â  Â  Â  Â  const card = document.createElement('div');
Â  Â  Â  Â  Â  Â  Â  card.classList.add('product-card');

Â  Â  Â  Â  Â  Â  Â  let displayPrice = product.price || 0;
Â  Â  Â  Â  Â  Â  Â  if (stockInfo.length) displayPrice = Math.min(...stockInfo.map(s => s.price || Infinity));
Â  Â  Â  Â  Â  Â  Â  const isUnavailable = !product.available || stockInfo.every(s => s.stock <= 0);
Â  Â  Â  Â  Â  Â  Â  if (isUnavailable) card.classList.add('unavailable');

Â  Â  Â  Â  Â  Â  Â  if (!product.available) {
Â  Â  Â  Â  Â  Â  Â  Â  card.classList.add('disabled-product');
Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  const imgHTML = product.image ? `<img src="${product.image}" alt="${product.name}" style="width:100%; border-radius:10px; margin-bottom:10px; margin-top:20px;">` : '';

Â  Â  Â  Â  Â  Â  Â  card.innerHTML = `
Â  Â  Â  Â  Â  Â  Â  Â  ${imgHTML}
Â  Â  Â  Â  Â  Â  Â  Â  <h3>${product.name || 'Unnamed Product'}</h3>
Â  Â  Â  Â  Â  Â  Â  Â  ${product.description ? `<p class="product-desc-card">${product.description}</p>` : ''}
Â  Â  Â  Â  Â  Â  Â  Â  <p>â‚±${displayPrice.toFixed(2)}</p>
Â  Â  Â  Â  Â  Â  Â  Â  ${!isUnavailable ? `<button class="add-cart-btn">Add to Cart</button>` : ''}
Â  Â  Â  Â  Â  Â  Â  `;

Â  Â  Â  Â  Â  Â  Â  const starsContainer = document.createElement('div');
Â  Â  Â  Â  Â  Â  Â  starsContainer.className = 'stars-outer';
Â  Â  Â  Â  Â  Â  Â  const starsInner = document.createElement('div');
Â  Â  Â  Â  Â  Â  Â  starsInner.className = 'stars-inner';
Â  Â  Â  Â  Â  Â  Â  starsContainer.appendChild(starsInner);
Â  Â  Â  Â  Â  Â  Â  const ratingNumber = document.createElement('span');
Â  Â  Â  Â  Â  Â  Â  ratingNumber.className = 'rating-number';
Â  Â  Â  Â  Â  Â  Â  card.appendChild(starsContainer);
Â  Â  Â  Â  Â  Â  Â  card.appendChild(ratingNumber);

Â  Â  Â  Â  Â  Â  Â  (async () => {
Â  Â  Â  Â  Â  Â  Â  Â  const orderSnapshot = await getDocs(collection(db, "DeliveryOrders"));
Â  Â  Â  Â  Â  Â  Â  Â  let totalRating = 0, count = 0;
Â  Â  Â  Â  Â  Â  Â  Â  orderSnapshot.forEach(docSnap => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  const order = docSnap.data();
Â  Â  Â  Â  Â  Â  Â  Â  Â  order.items?.forEach((item, index) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (item.product === product.name && order.feedbackRating?.[index] != null) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  totalRating += order.feedbackRating[index];
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  count++;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  let avgRating = count ? totalRating / count : 0;
Â  Â  Â  Â  Â  Â  Â  Â  starsInner.style.width = `${(avgRating / 5) * 100}%`;
Â  Â  Â  Â  Â  Â  Â  Â  ratingNumber.textContent = count ? `(${avgRating.toFixed(1)})` : '';
Â  Â  Â  Â  Â  Â  Â  })();

Â  Â  Â  Â  Â  Â  Â  horizontalContainer.appendChild(card);

Â  Â  Â  Â  Â  Â  Â  const addBtn = card.querySelector('.add-cart-btn');
Â  Â  Â  Â  Â  Â  Â  if (!isUnavailable && addBtn) {
Â  Â  Â  Â  Â  Â  Â  Â  addBtn.addEventListener('click', () => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  if (!currentUser) { openPopup(loginPopup); return; }
Â  Â  Â  Â  Â  Â  Â  Â  Â  openCartPopup(product, stockInfo);
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  const favIcon = document.createElement('i');
Â  Â  Â  Â  Â  Â  Â  favIcon.className = 'fa-regular fa-heart favorite-icon';
Â  Â  Â  Â  Â  Â  Â  card.appendChild(favIcon);

Â  Â  Â  Â  Â  Â  Â  if (currentUser) {
Â  Â  Â  Â  Â  Â  Â  Â  const favRef = doc(db, "favorites", `${currentUser.uid}_${product.id}`);
Â  Â  Â  Â  Â  Â  Â  Â  getDoc(favRef).then(favDoc => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  if (favDoc.exists()) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  favIcon.classList.replace('fa-regular', 'fa-solid');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  favIcon.classList.add('favorited');
Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  favIcon.addEventListener('click', async () => {
Â  Â  Â  Â  Â  Â  Â  Â  if (!currentUser) { openPopup(loginPopup); return; }
Â  Â  Â  Â  Â  Â  Â  Â  const favRef = doc(db, "favorites", `${currentUser.uid}_${product.id}`);
Â  Â  Â  Â  Â  Â  Â  Â  const favSnap = await getDoc(favRef);
Â  Â  Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  Â  if (favSnap.exists()) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await deleteDoc(favRef);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  favIcon.classList.replace('fa-solid', 'fa-regular');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  favIcon.classList.remove('favorited');
Â  Â  Â  Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await setDoc(favRef, { userId: currentUser.uid, productId: product.id, addedAt: new Date() });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  favIcon.classList.replace('fa-regular', 'fa-solid');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  favIcon.classList.add('favorited');
Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  } catch (err) { console.error(err); }
Â  Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  Â  const reviewBtn = document.createElement('button');
Â  Â  Â  Â  Â  Â  Â  reviewBtn.textContent = "Reviews";
Â  Â  Â  Â  Â  Â  Â  reviewBtn.className = "reviews-btn";
Â  Â  Â  Â  Â  Â  Â  card.appendChild(reviewBtn);

Â  Â  Â  Â  Â  Â  Â  reviewBtn.addEventListener('click', async () => {
Â  Â  Â  Â  Â  Â  Â  Â  const orderSnapshot = await getDocs(collection(db, "DeliveryOrders"));
Â  Â  Â  Â  Â  Â  Â  Â  const feedbacks = [];
Â  Â  Â  Â  Â  Â  Â  Â  orderSnapshot.forEach(docSnap => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  const order = docSnap.data();
Â  Â  Â  Â  Â  Â  Â  Â  Â  order.items?.forEach((item, index) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (item.product === product.name && order.feedback?.[index]) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  feedbacks.push({ text: order.feedback[index], customerEmail: order.customerName || "" });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  showReviewsPopup(product.name, feedbacks);
Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }

Â  Â  Â  Â  // Keep track of the first category that actually has products
Â  Â  Â  Â  if (mainCatHasProducts && !firstCategoryWithProducts) {
Â  Â  Â  Â  Â  firstCategoryWithProducts = name;
Â  Â  Â  Â  }
Â  Â  Â  });

Â  Â  Â  // AFTER loading products, set up and display the tabs
Â  Â  Â  setupTabs(firstCategoryWithProducts); 
Â  Â  });
Â  });
}

// ==========================
// Cart Popup 
// ==========================
function openCartPopup(product, stockInfo = []) {
Â  openPopup(cartPopup);
Â  cartPopup.querySelector('.product-name').textContent = product.name || 'Unnamed Product';
Â  cartPopup.querySelector('.product-desc').textContent = product.description || '';

Â  const sizesContainer = cartPopup.querySelector('.sizes-container');
Â  sizesContainer.innerHTML = '';
Â  let selectedSize = null;

Â  if (Array.isArray(stockInfo) && stockInfo.length) {
Â  Â  const heading = document.createElement('p'); heading.textContent = 'Sizes:'; sizesContainer.appendChild(heading);
Â  Â  
Â  Â  const updateMaxQty = (size) => {
Â  Â  Â  const quantityInput = cartPopup.querySelector('.quantity-input');
Â  Â  Â  const maxStock = size ? size.stock : 1;
Â  Â  Â  quantityInput.max = maxStock;
Â  Â  Â  if (parseInt(quantityInput.value) > maxStock) {
Â  Â  Â  Â  quantityInput.value = maxStock > 0 ? maxStock : 1;
Â  Â  Â  }
Â  Â  Â  if (maxStock <= 0) {
Â  Â  Â  Â  cartPopup.querySelector('.confirm-add-cart').disabled = true;
Â  Â  Â  } else {
Â  Â  Â  Â  cartPopup.querySelector('.confirm-add-cart').disabled = false;
Â  Â  Â  }
Â  Â  };

Â  Â  stockInfo.forEach(size => {
Â  Â  Â  const label = document.createElement('label'); label.classList.add('size-btn');
Â  Â  Â  const availableQty = size.stock || 0;
Â  Â  Â  
Â  Â  Â  label.textContent = `${size.name} - â‚±${(size.price || 0).toFixed(2)} (Stock: ${availableQty})`;
Â  Â  Â  
Â  Â  Â  const input = document.createElement('input'); input.type = 'radio'; input.name = 'size';
Â  Â  Â  
Â  Â  Â  if (availableQty <= 0) { 
Â  Â  Â  Â  input.disabled = true; 
Â  Â  Â  Â  label.classList.add('unavailable'); 
Â  Â  Â  }
Â  Â  Â  else if (!selectedSize) { 
Â  Â  Â  Â  input.checked = true; 
Â  Â  Â  Â  label.classList.add('selected'); 
Â  Â  Â  Â  selectedSize = { ...size }; 
Â  Â  Â  Â  updateMaxQty(selectedSize);
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  input.addEventListener('change', () => {
Â  Â  Â  Â  sizesContainer.querySelectorAll('label').forEach(l => l.classList.remove('selected'));
Â  Â  Â  Â  label.classList.add('selected'); 
Â  Â  Â  Â  selectedSize = { ...size };
Â  Â  Â  Â  updateMaxQty(selectedSize);

Â  Â  Â  Â  // Reload add-ons for the newly selected size
Â  Â  Â  Â  loadAddons(selectedSize);
Â  Â  Â  });
Â  Â  Â  
Â  Â  Â  label.prepend(input); 
Â  Â  Â  sizesContainer.appendChild(label);
Â  Â  });
Â  }

Â  const addonsContainer = cartPopup.querySelector('.addons-container');
Â  let selectedAddons = [];
Â  
Â  function loadAddons(size) {
Â  Â  addonsContainer.innerHTML = '';
Â  Â  selectedAddons = []; // Reset selected addons when size changes
Â  Â  if (!size?.addons?.length) return;
Â  Â  const heading = document.createElement('p'); heading.textContent = 'Add-ons:'; addonsContainer.appendChild(heading);

Â  Â  size.addons.forEach(addon => {
Â  Â  Â  const inventoryItem = inventoryMap[addon.id];
Â  Â  Â  const stock = inventoryItem ? Math.floor(inventoryItem.quantity / (addon.qty || 1)) : 0;
Â  Â  Â  
Â  Â  Â  const label = document.createElement('label'); 
Â  Â  Â  label.classList.add('addon-btn'); 
Â  Â  Â  label.textContent = `${addon.name} - â‚±${(addon.price || 0).toFixed(2)} (Stock: ${stock})`;
Â  Â  Â  
Â  Â  Â  const input = document.createElement('input'); 
Â  Â  Â  input.type = 'checkbox';
Â  Â  Â  
Â  Â  Â  const isOutOfStock = stock <= 0;
Â  Â  Â  
Â  Â  Â  if (isOutOfStock) { 
Â  Â  Â  Â  input.disabled = true; 
Â  Â  Â  Â  label.classList.add('unavailable'); 
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  input.addEventListener('change', () => {
Â  Â  Â  Â  if (input.checked) {
Â  Â  Â  Â  Â  if (!isOutOfStock) {
Â  Â  Â  Â  Â  Â  selectedAddons.push(addon);
Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  input.checked = false;
Â  Â  Â  Â  Â  Â  showToast(`${addon.name} is out of stock!`, 2000, "error");
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  else selectedAddons = selectedAddons.filter(a => a.id !== addon.id);
Â  Â  Â  });
Â  Â  Â  
Â  Â  Â  label.prepend(input); 
Â  Â  Â  addonsContainer.appendChild(label);
Â  Â  });
Â  }

Â  // Initial load for add-ons
Â  if (selectedSize) loadAddons(selectedSize);

Â  const quantityInput = cartPopup.querySelector('.quantity-input');
Â  quantityInput.value = 1; 
Â  quantityInput.min = 1; 
Â  
Â  if (!selectedSize) {
Â  Â  quantityInput.max = 1;
Â  Â  cartPopup.querySelector('.confirm-add-cart').disabled = true;
Â  }

Â  const confirmBtn = cartPopup.querySelector('.confirm-add-cart');
Â  confirmBtn.onclick = () => {
Â  Â  const quantity = parseInt(quantityInput.value) || 1;
Â  Â  
Â  Â  if (!selectedSize) { showToast("Please select a size first!", 2000, "error"); return; }
Â  Â  if (quantity <= 0) { showToast("Quantity must be greater than 0!", 2000, "error"); return; }
Â  Â  if (quantity > selectedSize.stock) { showToast(`Only ${selectedSize.stock} left in stock for the selected size!`, 2000, "error"); return; }
Â  Â  
Â  Â  // Final check for addon stock based on total quantity
Â  Â  for (const addon of selectedAddons) {
Â  Â  Â  const inventoryItem = inventoryMap[addon.id];
Â  Â  Â  // The required stock is the product quantity * the consumption quantity for the addon
Â  Â  Â  const requiredStock = (addon.qty || 1) * quantity; 
Â  Â  Â  if (!inventoryItem || inventoryItem.quantity < requiredStock) {
Â  Â  Â  Â  showToast(`Not enough stock for the selected quantity of ${addon.name}!`, 2000, "error");
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  }

Â  Â  const sizeToPass = { id: selectedSize.id, name: selectedSize.name, price: Number(selectedSize.price || 0) };
Â  Â  addToCart(product, sizeToPass, selectedAddons, quantity);
Â  Â  closePopup(cartPopup);
Â  Â  showToast(`${product.name} added to cart!`, 2000, "success");
Â  };
}

// ==========================
// Reviews Popup (modern)
// ==========================
function showReviewsPopup(productName, feedbacks) {
Â  const popup = document.createElement('div'); 
Â  popup.className = 'popup reviews-popup'; 
Â  popup.style.display = 'flex';
Â  Object.assign(popup.style, { justifyContent: 'center', alignItems: 'center' });

Â  const popupContent = document.createElement('div'); 
Â  popupContent.className = 'popup-content';
Â  Object.assign(popupContent.style, {
Â  Â  position: 'relative',
Â  Â  backgroundColor: '#fff',
Â  Â  padding: '20px',
Â  Â  borderRadius: '10px',
Â  Â  maxWidth: '400px',
Â  Â  width: '90%',
Â  Â  maxHeight: '80vh',
Â  Â  overflowY: 'auto',
Â  Â  boxShadow: '0 8px 20px rgba(0,0,0,0.2)'
Â  });

Â  const closeBtn = document.createElement('button');
Â  closeBtn.className = 'close-reviews';
Â  closeBtn.innerHTML = '&times;';
Â  Object.assign(closeBtn.style, { position: 'absolute', top: '10px', right: '10px', background: 'none', border: 'none', fontSize: '24px', cursor: 'pointer', color: '#333' });
Â  closeBtn.onclick = () => popup.remove();

Â  const title = document.createElement('h3'); 
Â  title.textContent = `Reviews for ${productName}`;
Â  title.style.marginTop = '0';
Â  title.style.marginBottom = '15px';

Â  const list = document.createElement('div'); 
Â  list.className = 'feedback-list';
Â  list.style.display = 'flex';
Â  list.style.flexDirection = 'column';
Â  list.style.gap = '10px';

Â  if (feedbacks.length) {
Â  Â  feedbacks.forEach(f => {
Â  Â  Â  let emailMasked = f.customerEmail;
Â  Â  Â  if (emailMasked) { 
Â  Â  Â  Â  const [name, domain] = emailMasked.split('@'); 
Â  Â  Â  Â  emailMasked = `${name.slice(0,3)}****@${domain}`; 
Â  Â  Â  }
Â  Â  Â  const p = document.createElement('p'); 
Â  Â  Â  p.textContent = `${emailMasked}: ${f.text}`; 
Â  Â  Â  list.appendChild(p);
Â  Â  });
Â  } else {
Â  Â  const p = document.createElement('p');
Â  Â  p.textContent = "No reviews yet.";
Â  Â  list.appendChild(p);
Â  }

Â  popupContent.append(closeBtn, title, list); 
Â  popup.appendChild(popupContent); 
Â  document.body.appendChild(popup);

Â  popup.addEventListener('click', e => { 
Â  Â  if (e.target === popup) popup.remove(); 
Â  });
}

// ==========================
// Terms Popup
// ==========================
if (termsPopup) {
Â  const closeTerms = termsPopup.querySelector('.close-terms');
Â  if (closeTerms) closeTerms.addEventListener('click', () => closePopup(termsPopup));
}

// ==========================
// Styling (Stars and NEW Tabs CSS)
// ==========================
const style = document.createElement('style');
style.textContent = `
.stars-outer { position: relative; display: inline-block; color: #ccc; font-size: 16px; font-family: Arial, sans-serif; }
.stars-inner { position: absolute; top: 0; left: 0; white-space: nowrap; overflow: hidden; color: gold; }
.stars-outer::before, .stars-inner::before { content: "â˜…â˜…â˜…â˜…â˜…"; }
.rating-number { margin-left: 5px; font-weight: 500; color: #333; font-size: 14px; }

/* NEW CSS for Tabs */
.tab-container {
Â  display: flex;
Â  overflow-x: auto; /* Allows scrolling on small screens */
Â  border-bottom: 2px solid #ccc;
Â  margin-bottom: 20px;
Â  background-color: #f7f7f7;
Â  border-radius: 8px;
Â  padding: 5px;
}

.tab-button {
Â  padding: 10px 20px;
Â  border: none;
Â  background: transparent;
Â  cursor: pointer;
Â  font-size: 16px;
Â  font-weight: 600;
Â  color: #555;
Â  transition: color 0.3s, background-color 0.3s, border-bottom 0.3s;
Â  white-space: nowrap;
}

.tab-button:hover:not(.active) {
Â  background-color: #eee;
}

.tab-button.active {
Â  color: #007bff; /* Primary color */
Â  border-bottom: 3px solid #007bff;
Â  background-color: #fff;
Â  border-radius: 5px 5px 0 0;
}

.category-section {
Â  /* Initially hidden, controlled by JavaScript */
Â  display: none; 
}
`;
document.head.appendChild(style);

// ==========================
// INIT
// ==========================
loadProductsRealtime();
