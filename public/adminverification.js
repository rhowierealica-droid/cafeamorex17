import { auth, db } from './firebase-config.js';
import { 
Â  createUserWithEmailAndPassword, 
Â  sendEmailVerification,
Â  RecaptchaVerifier,
Â  signInWithPhoneNumber 
} from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
import { doc, setDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

/* ===============================
Â  Â Message Popup Helper
=============================== */
const messagePopup = document.getElementById("messagePopup");
const messageText = document.getElementById("messageText");
const popupOkBtn = document.getElementById("popupOkBtn");
let shouldRedirect = false;

function showMessage(msg, redirect = false) {
Â  messageText.textContent = msg;
Â  shouldRedirect = redirect;
Â  messagePopup.style.display = "flex";
}

popupOkBtn.addEventListener("click", () => {
Â  messagePopup.style.display = "none";
Â  if (shouldRedirect) window.location.href = "login.html";
});

/* ===============================
Â  Â Terms Popup with Scroll Requirement
=============================== */
const termsPopup = document.getElementById("termsPopup");
const termsCheckbox = document.getElementById("terms");
const termsLabel = document.getElementById("termsLabel");
const termsOkBtn = document.getElementById("termsOkBtn");
const termsCancelBtn = document.getElementById("termsCancelBtn");
const termsBody = document.querySelector(".terms-body");
let isOpeningPopup = false;

// Initial state
termsOkBtn.disabled = true;
termsOkBtn.style.opacity = 0.5;

// Enable button when scrolled to bottom
termsBody.addEventListener("scroll", () => {
Â  // Check if the user has scrolled within 5 pixels of the bottom
Â  if (termsBody.scrollTop + termsBody.clientHeight >= termsBody.scrollHeight - 5) {
Â  Â  termsOkBtn.disabled = false;
Â  Â  termsOkBtn.style.opacity = 1;
Â  }
});

// ðŸ›‘ FIX: Reset scroll position and disable button every time the popup opens
function openTermsPopup() {
Â  termsOkBtn.disabled = true;
Â  termsOkBtn.style.opacity = 0.5;
Â  termsBody.scrollTop = 0; // Ensures the scroll requirement is active again
Â  termsPopup.style.display = "flex";
}

// Open popup on checkbox change
termsCheckbox.addEventListener("change", (e) => {
Â  if (termsCheckbox.checked && !isOpeningPopup) {
Â  Â  e.preventDefault();
Â  Â  termsCheckbox.checked = false;
Â  Â  openTermsPopup();
Â  }
});

// Open popup on label click
termsLabel.addEventListener("click", (e) => {
Â  e.preventDefault();
Â  openTermsPopup();
});

// Accept terms
termsOkBtn.addEventListener("click", () => {
Â  isOpeningPopup = true;
Â  termsCheckbox.checked = true;
Â  isOpeningPopup = false;
Â  termsPopup.style.display = "none";
});

// Cancel terms
termsCancelBtn.addEventListener("click", () => {
Â  termsPopup.style.display = "none";
Â  termsCheckbox.checked = false;
});

/* ===============================
Â  Â Password Validation
=============================== */
function validatePassword(pass) {
Â  const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
Â  return regex.test(pass);
}

/* ===============================
Â  Â Phone Authentication Setup
=============================== */
const phoneInput = document.getElementById("phoneNumber");
const sendOtpBtn = document.getElementById("sendOtpBtn");
const otpPopup = document.getElementById("otpPopup");
const otpCode = document.getElementById("otpCode");
let otpErrorMsg = document.getElementById("otpErrorMsg");
if (!otpErrorMsg) {
Â  otpErrorMsg = document.createElement("div");
Â  otpErrorMsg.id = "otpErrorMsg";
Â  otpErrorMsg.style.color = "red";
Â  otpErrorMsg.style.marginTop = "5px";
Â  otpPopup.querySelector(".message-content").appendChild(otpErrorMsg);
}
otpErrorMsg.style.display = "none";

const verifyOtpBtn = document.getElementById("verifyOtpBtn");
const closeOtpBtn = document.getElementById("closeOtpBtn");
let confirmationResult;
let isPhoneVerified = false;

function showOtpError(message) {
Â  otpErrorMsg.textContent = message;
Â  otpErrorMsg.style.display = "block";
}
function clearOtpError() {
Â  otpErrorMsg.style.display = "none";
}

if (sendOtpBtn) {
Â  window.recaptchaVerifier = new RecaptchaVerifier(auth, "recaptcha-container", { size: "invisible" });

Â  sendOtpBtn.addEventListener("click", async () => {
Â  Â  const phoneNumber = phoneInput.value.trim();
Â  Â  if (!phoneNumber.startsWith("+63")) {
Â  Â  Â  showMessage("Phone number must start with +63 (PH format).");
Â  Â  Â  return;
Â  Â  }
Â  Â  try {
Â  Â  Â  confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, window.recaptchaVerifier);
Â  Â  Â  otpPopup.style.display = "flex";
Â  Â  Â  clearOtpError();
Â  Â  } catch (error) {
Â  Â  Â  showMessage("Failed to send OTP. Please try again.");
Â  Â  }
Â  });
}

if (verifyOtpBtn) {
Â  verifyOtpBtn.addEventListener("click", async () => {
Â  Â  clearOtpError();
Â  Â  if (!otpCode.value.trim()) {
Â  Â  Â  showOtpError("Please enter the OTP.");
Â  Â  Â  return;
Â  Â  }
Â  Â  try {
Â  Â  Â  const result = await confirmationResult.confirm(otpCode.value.trim());
Â  Â  Â  otpPopup.style.display = "none";
Â  Â  Â  isPhoneVerified = true;
Â  Â  Â  showMessage("Phone number verified: " + result.user.phoneNumber);
Â  Â  } catch (error) {
Â  Â  Â  isPhoneVerified = false;
Â  Â  Â  showOtpError("Wrong OTP. Please try again.");
Â  Â  }
Â  });
}

if (closeOtpBtn) {
Â  closeOtpBtn.addEventListener("click", () => {
Â  Â  otpPopup.style.display = "none";
Â  Â  clearOtpError();
Â  });
}

/* ===============================
Â  Â Registration with Email + Phone
=============================== */
const registerForm = document.getElementById("registerForm");
const password = document.getElementById("password");
const confirmPassword = document.getElementById("confirmPassword");
const passwordError = document.getElementById("passwordError");

if (registerForm) {
Â  registerForm.addEventListener("submit", async (e) => {
Â  Â  e.preventDefault();

Â  Â  password.classList.remove("input-error");
Â  Â  confirmPassword.classList.remove("input-error");
Â  Â  passwordError.style.display = "none";

Â  Â  if (!termsCheckbox.checked) {
Â  Â  Â  showMessage("You must agree to the Terms and Conditions before registering.");
Â  Â  Â  return;
Â  Â  }

Â  Â  if (!isPhoneVerified) {
Â  Â  Â  showMessage("Please verify your phone number before registering.");
Â  Â  Â  return;
Â  Â  }

Â  Â  const email = document.getElementById("email").value.trim();
Â  Â  const phoneNumber = phoneInput.value.trim();
Â  Â  const pass = password.value;
Â  Â  const confirmPass = confirmPassword.value;

Â  Â  if (!validatePassword(pass)) {
Â  Â  Â  password.classList.add("input-error");
Â  Â  Â  passwordError.innerText = "Password must be at least 8 characters, include uppercase, lowercase, number, and special character.";
Â  Â  Â  passwordError.style.display = "block";
Â  Â  Â  return;
Â  Â  }

Â  Â  if (pass !== confirmPass) {
Â  Â  Â  password.classList.add("input-error");
Â  Â  Â  confirmPassword.classList.add("input-error");
Â  Â  Â  passwordError.innerText = "Passwords do not match.";
Â  Â  Â  passwordError.style.display = "block";
Â  Â  Â  return;
Â  Â  }

Â  Â  try {
Â  Â  Â  const userCred = await createUserWithEmailAndPassword(auth, email, pass);
Â  Â  Â  await sendEmailVerification(userCred.user);

Â  Â  Â  await setDoc(doc(db, "users", userCred.user.uid), {
Â  Â  Â  Â  email,
Â  Â  Â  Â  phoneNumber,
Â  Â  Â  Â  role: "Admin"
Â  Â  Â  });

Â  Â  Â  showMessage(`Registration successful! Please verify your email.`, true);
Â  Â  Â  registerForm.reset();
Â  Â  Â  termsCheckbox.checked = false;
Â  Â  Â  isPhoneVerified = false;

Â  Â  } catch (error) {
Â  Â  Â  let errorMessage = "Something went wrong. Please try again.";
Â  Â  Â  if (error.code === "auth/email-already-in-use") {
Â  Â  Â  Â  errorMessage = "The email is already in use. Please use a different email.";
Â  Â  Â  } else if (error.code === "auth/invalid-email") {
Â  Â  Â  Â  errorMessage = "The email address is not valid.";
Â  Â  Â  } else if (error.code === "auth/weak-password") {
Â  Â  Â  Â  errorMessage = "Password is too weak. Please choose a stronger password.";
Â  Â  Â  }
Â  Â  Â  showMessage(errorMessage);
Â  Â  }
Â  });
}